#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

#define BASE 0
#define LSIDE  1
#define RSIDE  2
#define SYS  3

&mt {
  tapping-term-ms = <500>;
};

/ {
    behaviors {
         Lht: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <750>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        Rht: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <750>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        td_Esc: tap_dance_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "tap dance Esc";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&kp ESC>, <&kp GRAVE>;
        };
        td_J: tap_dance_j {
            compatible = "zmk,behavior-tap-dance";
            label = "tap dance J";
            #binding-cells = <0>;
            tapping-term-ms = <375>;
            bindings = <&Rht RCTRL SPACE>, <&kp J>;
        };
        td_F: tap_dance_f {
            compatible = "zmk,behavior-tap-dance";
            label = "tap dance F";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp F>, <&kp SPACE>;
        };
        td_lr: tap_dance_R_lower_right {
            compatible = "zmk,behavior-tap-dance";
            label = "tap dance overload left lower right key";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&lt RSIDE BSPC>, <&kp LBKT>;
        };
        td_ll: tap_dance_L_lower_left {
            compatible = "zmk,behavior-tap-dance";
            label = "tap dance overload right lower left key";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&lt LSIDE SPACE>, <&kp N>;
        };
    };

     combos {
            compatible = "zmk,combos";


            combo_esc {
              timeout-ms = <70>;
                key-positions = <26 27>;
                bindings = <&kp ESC>;
            };
            combo_tab {
                timeout-ms = <70>;
                key-positions = <27 28>;
                bindings = <&kp TAB>;
            };

            combo_backspace {
                timeout-ms = <70>;
                key-positions = <19 20>;
                bindings = <&kp BSPC>;
            };
            combo_delete {
                timeout-ms = <70>;
                key-positions = <20 21>;
                bindings = <&kp DEL>;
            };
//            combo_space {
//                timeout-ms = <70>;
//                key-positions = <31 32>;
//                bindings = <&kp SPACE>;
//            };
//            combo_enter {
//                timeout-ms = <70>;
//                key-positions = <32 33>;
//                bindings = <&kp RETURN>;
//            };
//           combo_R_down_indexmid {
//               timeout-ms = <70>;
//               key-positions = <31 32>;
//               bindings = <&kp BSPC>;
//           };
//           combo_R_down_midring {
//               timeout-ms = <70>;
//               key-positions = <32 33>;
//               bindings = <&kp DEL>;
//           };

            combo_j {
                timeout-ms = <70>;
                key-positions = <30 31>;
                bindings = <&kp J>;
            };
    };
    
    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
&kp LBKT        &kp Q           &kp W           &kp E           &kp R           &kp T                           &kp Y               &kp U               &kp I           &kp O           &kp P               &kp RBKT
&kp TAB         &kp A           &Lht LSFT S     &Lht LALT D     &Lht LCTRL F    &Lht LGUI G                     &Rht RGUI H         &Rht RCTRL J        &Rht RALT K     &Rht RSHFT L    &kp SEMICOLON       &kp BSPC
&kp ESC         &kp Z           &kp X           &kp C           &kp V           &kp B                           &kp N               &kp M               &kp COMMA       &kp DOT         &kp SLASH           &kp RETURN
&lt SYS MINUS   &kp LGUI        &kp LSFT        &kp LALT        &kp LCTRL       &lt RSIDE BSPC                  &lt LSIDE SPACE     &kp LEFT            &kp DOWN        &kp UP          &kp RIGHT           &lt SYS EQUAL

            >;
      
        };

        left_layer {
            bindings = <
&kp MINUS       &kp N1          &kp N2          &kp N3          &kp N4          &kp N5                          &none               &none               &none           &none           &none               &none
&kp GRAVE       &none           &none           &none           &none           &none                           &kp RGUI            &kp RCTRL           &kp RALT        &kp RSHFT       &none               &none
&none           &none           &none           &none           &none           &none                           &none               &none               &none           &none           &none               &none               
&none           &none           &none           &none           &none           &none                           &trans              &none               &none           &none           &none               &none
            >;
        };
                
        right_layer {
            bindings = <
&none           &none           &none           &none           &none           &none                           &kp N6              &kp N7              &kp N8          &kp N9          &kp N0              &kp EQUAL
&none           &none           &kp LSHFT       &kp LALT        &kp LCTRL       &kp LGUI                        &kp PG_UP           &kp HOME            &kp UP          &kp END         &kp SINGLE_QUOTE    &kp DELETE                                           
&none           &none           &none           &none           &none           &none                           &kp PG_DN           &kp LEFT            &kp DOWN        &kp RIGHT       &kp BACKSLASH       &none               
&none           &none           &none           &none           &none           &trans                          &none               &none               &none           &none           &none               &none           
            >;
        };
    

        sys_layer {
            bindings = <
&none               &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI &rgb_ug RGB_TOG &none                      &kp F1              &kp F2              &kp F3          &kp F4          &kp F5               &kp F6
&kp K_POWER         &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD &rgb_ug RGB_EFF &none                      &kp F7              &kp F8              &kp F9          &kp F10         &kp F11              &kp F12
&none               &none           &none           &none           &none           &bootloader                &bootloader         &kp C_BRI_UP        &kp C_VOL_UP    &none           &none                &none
&trans              &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_CLR      &sys_reset                 &sys_reset          &kp C_BRI_DN        &kp C_VOL_DN    &none           &none                &none
            >;
        };


        num_layer {
            bindings = <
&none           &none           &kp KP_N7       &kp KP_N8       &kp KP_N9       &kp KP_PLUS                     &none               &none               &none           &none           &none               &trans
&kp GRAVE       &none           &kp KP_N4       &kp KP_N5       &kp KP_N6       &kp KP_MINUS                    &kp RGUI            &kp RCTRL           &kp RALT        &kp RSHFT       &none               &none
&kp TAB         &none           &kp KP_N1       &kp KP_N2       &kp KP_N3       &kp KP_MULTIPLY                 &none               &none               &none           &none           &none               &none               
&none           &none           &none           &kp KP_DOT      &kp KP_N0       &kp KP_DIVIDE                   &trans              &none               &none           &none           &none               &none
            >;
        };

        aaa {
            bindings = <
&none           &none           &none           &none           &none           &none                           &kp PG_UP           &kp HOME            &kp UP          &kp END         &none               &kp BACKSLASH                       
&none           &kp LGUI        &kp LSHFT       &kp LALT        &kp LCTRL       &none                           &kp PG_DN           &kp LEFT            &kp DOWN        &kp RIGHT       &kp SINGLE_QUOTE    &kp DELETE                    
&none           &none           &none           &none           &none           &none                           &kp N6              &kp N7              &kp N8          &kp N9          &kp N0              &kp EQUAL          
&none           &none           &none           &none           &none           &trans                          &none               &none               &none           &none           &none               &none           
            >;
        };
    };
};
